/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface AuthorityCenterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAuthority"
      | "isAuthority"
      | "isCertifiedFarm"
      | "owner"
      | "registerFarm"
      | "removeAuthority"
      | "removeFarm"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorityAdded"
      | "AuthorityRemoved"
      | "FarmRegistered"
      | "FarmRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCertifiedFarm",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerFarm",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAuthority",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFarm",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCertifiedFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerFarm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeFarm", data: BytesLike): Result;
}

export namespace AuthorityAddedEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorityRemovedEvent {
  export type InputTuple = [authority: AddressLike];
  export type OutputTuple = [authority: string];
  export interface OutputObject {
    authority: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FarmRegisteredEvent {
  export type InputTuple = [farm: AddressLike];
  export type OutputTuple = [farm: string];
  export interface OutputObject {
    farm: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FarmRemovedEvent {
  export type InputTuple = [farm: AddressLike];
  export type OutputTuple = [farm: string];
  export interface OutputObject {
    farm: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AuthorityCenter extends BaseContract {
  connect(runner?: ContractRunner | null): AuthorityCenter;
  waitForDeployment(): Promise<this>;

  interface: AuthorityCenterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAuthority: TypedContractMethod<
    [_authority: AddressLike],
    [void],
    "nonpayable"
  >;

  isAuthority: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  isCertifiedFarm: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerFarm: TypedContractMethod<[_farm: AddressLike], [void], "nonpayable">;

  removeAuthority: TypedContractMethod<
    [_authority: AddressLike],
    [void],
    "nonpayable"
  >;

  removeFarm: TypedContractMethod<[_farm: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAuthority"
  ): TypedContractMethod<[_authority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthority"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isCertifiedFarm"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerFarm"
  ): TypedContractMethod<[_farm: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeAuthority"
  ): TypedContractMethod<[_authority: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeFarm"
  ): TypedContractMethod<[_farm: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuthorityAdded"
  ): TypedContractEvent<
    AuthorityAddedEvent.InputTuple,
    AuthorityAddedEvent.OutputTuple,
    AuthorityAddedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorityRemoved"
  ): TypedContractEvent<
    AuthorityRemovedEvent.InputTuple,
    AuthorityRemovedEvent.OutputTuple,
    AuthorityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "FarmRegistered"
  ): TypedContractEvent<
    FarmRegisteredEvent.InputTuple,
    FarmRegisteredEvent.OutputTuple,
    FarmRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "FarmRemoved"
  ): TypedContractEvent<
    FarmRemovedEvent.InputTuple,
    FarmRemovedEvent.OutputTuple,
    FarmRemovedEvent.OutputObject
  >;

  filters: {
    "AuthorityAdded(address)": TypedContractEvent<
      AuthorityAddedEvent.InputTuple,
      AuthorityAddedEvent.OutputTuple,
      AuthorityAddedEvent.OutputObject
    >;
    AuthorityAdded: TypedContractEvent<
      AuthorityAddedEvent.InputTuple,
      AuthorityAddedEvent.OutputTuple,
      AuthorityAddedEvent.OutputObject
    >;

    "AuthorityRemoved(address)": TypedContractEvent<
      AuthorityRemovedEvent.InputTuple,
      AuthorityRemovedEvent.OutputTuple,
      AuthorityRemovedEvent.OutputObject
    >;
    AuthorityRemoved: TypedContractEvent<
      AuthorityRemovedEvent.InputTuple,
      AuthorityRemovedEvent.OutputTuple,
      AuthorityRemovedEvent.OutputObject
    >;

    "FarmRegistered(address)": TypedContractEvent<
      FarmRegisteredEvent.InputTuple,
      FarmRegisteredEvent.OutputTuple,
      FarmRegisteredEvent.OutputObject
    >;
    FarmRegistered: TypedContractEvent<
      FarmRegisteredEvent.InputTuple,
      FarmRegisteredEvent.OutputTuple,
      FarmRegisteredEvent.OutputObject
    >;

    "FarmRemoved(address)": TypedContractEvent<
      FarmRemovedEvent.InputTuple,
      FarmRemovedEvent.OutputTuple,
      FarmRemovedEvent.OutputObject
    >;
    FarmRemoved: TypedContractEvent<
      FarmRemovedEvent.InputTuple,
      FarmRemovedEvent.OutputTuple,
      FarmRemovedEvent.OutputObject
    >;
  };
}
