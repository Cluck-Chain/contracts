/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FarmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chickenCount"
      | "chickens"
      | "eggCount"
      | "eggs"
      | "metadataURI"
      | "name"
      | "owner"
      | "registerChicken"
      | "registerEgg"
      | "removeChicken"
      | "updateInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ChickenAdded" | "ChickenRemoved" | "EggAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chickenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chickens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "eggCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "eggs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerChicken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEgg",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeChicken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateInfo",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "chickenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chickens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eggCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eggs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerChicken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEgg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChicken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateInfo", data: BytesLike): Result;
}

export namespace ChickenAddedEvent {
  export type InputTuple = [
    chickenId: BigNumberish,
    birthTime: BigNumberish,
    metadataURI: string
  ];
  export type OutputTuple = [
    chickenId: bigint,
    birthTime: bigint,
    metadataURI: string
  ];
  export interface OutputObject {
    chickenId: bigint;
    birthTime: bigint;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChickenRemovedEvent {
  export type InputTuple = [chickenId: BigNumberish];
  export type OutputTuple = [chickenId: bigint];
  export interface OutputObject {
    chickenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EggAddedEvent {
  export type InputTuple = [
    eggId: BigNumberish,
    chickenId: BigNumberish,
    birthTime: BigNumberish,
    metadataURI: string
  ];
  export type OutputTuple = [
    eggId: bigint,
    chickenId: bigint,
    birthTime: bigint,
    metadataURI: string
  ];
  export interface OutputObject {
    eggId: bigint;
    chickenId: bigint;
    birthTime: bigint;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Farm extends BaseContract {
  connect(runner?: ContractRunner | null): Farm;
  waitForDeployment(): Promise<this>;

  interface: FarmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chickenCount: TypedContractMethod<[], [bigint], "view">;

  chickens: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        birthTime: bigint;
        metadataURI: string;
        isAlive: boolean;
      }
    ],
    "view"
  >;

  eggCount: TypedContractMethod<[], [bigint], "view">;

  eggs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        chickenId: bigint;
        birthTime: bigint;
        metadataURI: string;
      }
    ],
    "view"
  >;

  metadataURI: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerChicken: TypedContractMethod<
    [_metadataURI: string],
    [void],
    "nonpayable"
  >;

  registerEgg: TypedContractMethod<
    [chickenId: BigNumberish, _metadataURI: string],
    [void],
    "nonpayable"
  >;

  removeChicken: TypedContractMethod<
    [chickenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateInfo: TypedContractMethod<
    [_name: string, _metadataURI: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chickenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "chickens"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean] & {
        birthTime: bigint;
        metadataURI: string;
        isAlive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eggCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eggs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        chickenId: bigint;
        birthTime: bigint;
        metadataURI: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "metadataURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerChicken"
  ): TypedContractMethod<[_metadataURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerEgg"
  ): TypedContractMethod<
    [chickenId: BigNumberish, _metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeChicken"
  ): TypedContractMethod<[chickenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateInfo"
  ): TypedContractMethod<
    [_name: string, _metadataURI: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChickenAdded"
  ): TypedContractEvent<
    ChickenAddedEvent.InputTuple,
    ChickenAddedEvent.OutputTuple,
    ChickenAddedEvent.OutputObject
  >;
  getEvent(
    key: "ChickenRemoved"
  ): TypedContractEvent<
    ChickenRemovedEvent.InputTuple,
    ChickenRemovedEvent.OutputTuple,
    ChickenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EggAdded"
  ): TypedContractEvent<
    EggAddedEvent.InputTuple,
    EggAddedEvent.OutputTuple,
    EggAddedEvent.OutputObject
  >;

  filters: {
    "ChickenAdded(uint32,uint32,string)": TypedContractEvent<
      ChickenAddedEvent.InputTuple,
      ChickenAddedEvent.OutputTuple,
      ChickenAddedEvent.OutputObject
    >;
    ChickenAdded: TypedContractEvent<
      ChickenAddedEvent.InputTuple,
      ChickenAddedEvent.OutputTuple,
      ChickenAddedEvent.OutputObject
    >;

    "ChickenRemoved(uint32)": TypedContractEvent<
      ChickenRemovedEvent.InputTuple,
      ChickenRemovedEvent.OutputTuple,
      ChickenRemovedEvent.OutputObject
    >;
    ChickenRemoved: TypedContractEvent<
      ChickenRemovedEvent.InputTuple,
      ChickenRemovedEvent.OutputTuple,
      ChickenRemovedEvent.OutputObject
    >;

    "EggAdded(uint32,uint32,uint32,string)": TypedContractEvent<
      EggAddedEvent.InputTuple,
      EggAddedEvent.OutputTuple,
      EggAddedEvent.OutputObject
    >;
    EggAdded: TypedContractEvent<
      EggAddedEvent.InputTuple,
      EggAddedEvent.OutputTuple,
      EggAddedEvent.OutputObject
    >;
  };
}
