/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FarmInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorityCenter"
      | "ipfsHash"
      | "isAuthorized"
      | "location"
      | "name"
      | "owner"
      | "updateInfo"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FarmInfoUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "authorityCenter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ipfsHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "location", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateInfo",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorityCenter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ipfsHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "location", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateInfo", data: BytesLike): Result;
}

export namespace FarmInfoUpdatedEvent {
  export type InputTuple = [name: string, location: string, ipfsHash: string];
  export type OutputTuple = [name: string, location: string, ipfsHash: string];
  export interface OutputObject {
    name: string;
    location: string;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Farm extends BaseContract {
  connect(runner?: ContractRunner | null): Farm;
  waitForDeployment(): Promise<this>;

  interface: FarmInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorityCenter: TypedContractMethod<[], [string], "view">;

  ipfsHash: TypedContractMethod<[], [string], "view">;

  isAuthorized: TypedContractMethod<[], [boolean], "view">;

  location: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  updateInfo: TypedContractMethod<
    [_name: string, _location: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorityCenter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ipfsHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "location"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "updateInfo"
  ): TypedContractMethod<
    [_name: string, _location: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FarmInfoUpdated"
  ): TypedContractEvent<
    FarmInfoUpdatedEvent.InputTuple,
    FarmInfoUpdatedEvent.OutputTuple,
    FarmInfoUpdatedEvent.OutputObject
  >;

  filters: {
    "FarmInfoUpdated(string,string,string)": TypedContractEvent<
      FarmInfoUpdatedEvent.InputTuple,
      FarmInfoUpdatedEvent.OutputTuple,
      FarmInfoUpdatedEvent.OutputObject
    >;
    FarmInfoUpdated: TypedContractEvent<
      FarmInfoUpdatedEvent.InputTuple,
      FarmInfoUpdatedEvent.OutputTuple,
      FarmInfoUpdatedEvent.OutputObject
    >;
  };
}
