/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ChickenEggTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "chickenExists"
      | "chickens"
      | "eggExists"
      | "eggs"
      | "farm"
      | "getChickenInfo"
      | "getEggInfo"
      | "registerChicken"
      | "registerEgg"
      | "removeChicken"
      | "removeEgg"
      | "updateChickenInfo"
      | "updateEggInfo"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChickenRegistered"
      | "ChickenRemoved"
      | "EggRegistered"
      | "EggRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "chickenExists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "chickens", values: [string]): string;
  encodeFunctionData(functionFragment: "eggExists", values: [string]): string;
  encodeFunctionData(functionFragment: "eggs", values: [string]): string;
  encodeFunctionData(functionFragment: "farm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getChickenInfo",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getEggInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "registerChicken",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerEgg",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeChicken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "removeEgg", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateChickenInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEggInfo",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "chickenExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chickens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eggExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "eggs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "farm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChickenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getEggInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerChicken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerEgg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeChicken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeEgg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateChickenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEggInfo",
    data: BytesLike
  ): Result;
}

export namespace ChickenRegisteredEvent {
  export type InputTuple = [
    chickenId: string,
    breed: string,
    birthDate: string
  ];
  export type OutputTuple = [
    chickenId: string,
    breed: string,
    birthDate: string
  ];
  export interface OutputObject {
    chickenId: string;
    breed: string;
    birthDate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChickenRemovedEvent {
  export type InputTuple = [chickenId: string];
  export type OutputTuple = [chickenId: string];
  export interface OutputObject {
    chickenId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EggRegisteredEvent {
  export type InputTuple = [
    eggId: string,
    chickenId: string,
    productionDate: string
  ];
  export type OutputTuple = [
    eggId: string,
    chickenId: string,
    productionDate: string
  ];
  export interface OutputObject {
    eggId: string;
    chickenId: string;
    productionDate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EggRemovedEvent {
  export type InputTuple = [eggId: string];
  export type OutputTuple = [eggId: string];
  export interface OutputObject {
    eggId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ChickenEggTracker extends BaseContract {
  connect(runner?: ContractRunner | null): ChickenEggTracker;
  waitForDeployment(): Promise<this>;

  interface: ChickenEggTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  chickenExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  chickens: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        chickenId: string;
        breed: string;
        birthDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  eggExists: TypedContractMethod<[arg0: string], [boolean], "view">;

  eggs: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        eggId: string;
        chickenId: string;
        productionDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  farm: TypedContractMethod<[], [string], "view">;

  getChickenInfo: TypedContractMethod<
    [_chickenId: string],
    [
      [string, string, string, string, boolean, bigint] & {
        chickenId: string;
        breed: string;
        birthDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  getEggInfo: TypedContractMethod<
    [_eggId: string],
    [
      [string, string, string, string, boolean, bigint] & {
        eggId: string;
        chickenId: string;
        productionDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;

  registerChicken: TypedContractMethod<
    [_chickenId: string, _breed: string, _birthDate: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  registerEgg: TypedContractMethod<
    [
      _eggId: string,
      _chickenId: string,
      _productionDate: string,
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  removeChicken: TypedContractMethod<
    [_chickenId: string],
    [void],
    "nonpayable"
  >;

  removeEgg: TypedContractMethod<[_eggId: string], [void], "nonpayable">;

  updateChickenInfo: TypedContractMethod<
    [_chickenId: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  updateEggInfo: TypedContractMethod<
    [_eggId: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "chickenExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "chickens"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        chickenId: string;
        breed: string;
        birthDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eggExists"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "eggs"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, string, boolean, bigint] & {
        eggId: string;
        chickenId: string;
        productionDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "farm"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getChickenInfo"
  ): TypedContractMethod<
    [_chickenId: string],
    [
      [string, string, string, string, boolean, bigint] & {
        chickenId: string;
        breed: string;
        birthDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEggInfo"
  ): TypedContractMethod<
    [_eggId: string],
    [
      [string, string, string, string, boolean, bigint] & {
        eggId: string;
        chickenId: string;
        productionDate: string;
        ipfsHash: string;
        isActive: boolean;
        registrationDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerChicken"
  ): TypedContractMethod<
    [_chickenId: string, _breed: string, _birthDate: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerEgg"
  ): TypedContractMethod<
    [
      _eggId: string,
      _chickenId: string,
      _productionDate: string,
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeChicken"
  ): TypedContractMethod<[_chickenId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeEgg"
  ): TypedContractMethod<[_eggId: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateChickenInfo"
  ): TypedContractMethod<
    [_chickenId: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEggInfo"
  ): TypedContractMethod<
    [_eggId: string, _ipfsHash: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ChickenRegistered"
  ): TypedContractEvent<
    ChickenRegisteredEvent.InputTuple,
    ChickenRegisteredEvent.OutputTuple,
    ChickenRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ChickenRemoved"
  ): TypedContractEvent<
    ChickenRemovedEvent.InputTuple,
    ChickenRemovedEvent.OutputTuple,
    ChickenRemovedEvent.OutputObject
  >;
  getEvent(
    key: "EggRegistered"
  ): TypedContractEvent<
    EggRegisteredEvent.InputTuple,
    EggRegisteredEvent.OutputTuple,
    EggRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "EggRemoved"
  ): TypedContractEvent<
    EggRemovedEvent.InputTuple,
    EggRemovedEvent.OutputTuple,
    EggRemovedEvent.OutputObject
  >;

  filters: {
    "ChickenRegistered(string,string,string)": TypedContractEvent<
      ChickenRegisteredEvent.InputTuple,
      ChickenRegisteredEvent.OutputTuple,
      ChickenRegisteredEvent.OutputObject
    >;
    ChickenRegistered: TypedContractEvent<
      ChickenRegisteredEvent.InputTuple,
      ChickenRegisteredEvent.OutputTuple,
      ChickenRegisteredEvent.OutputObject
    >;

    "ChickenRemoved(string)": TypedContractEvent<
      ChickenRemovedEvent.InputTuple,
      ChickenRemovedEvent.OutputTuple,
      ChickenRemovedEvent.OutputObject
    >;
    ChickenRemoved: TypedContractEvent<
      ChickenRemovedEvent.InputTuple,
      ChickenRemovedEvent.OutputTuple,
      ChickenRemovedEvent.OutputObject
    >;

    "EggRegistered(string,string,string)": TypedContractEvent<
      EggRegisteredEvent.InputTuple,
      EggRegisteredEvent.OutputTuple,
      EggRegisteredEvent.OutputObject
    >;
    EggRegistered: TypedContractEvent<
      EggRegisteredEvent.InputTuple,
      EggRegisteredEvent.OutputTuple,
      EggRegisteredEvent.OutputObject
    >;

    "EggRemoved(string)": TypedContractEvent<
      EggRemovedEvent.InputTuple,
      EggRemovedEvent.OutputTuple,
      EggRemovedEvent.OutputObject
    >;
    EggRemoved: TypedContractEvent<
      EggRemovedEvent.InputTuple,
      EggRemovedEvent.OutputTuple,
      EggRemovedEvent.OutputObject
    >;
  };
}
